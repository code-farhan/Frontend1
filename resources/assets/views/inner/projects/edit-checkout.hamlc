.checkout-page
  %h2 Checkout keys for
    %span{data-bind: "text: project_name"}

  .checkout-page-inner
    %div{data-bind: "ifnot: checkout_keys().length"}
      %p
        No checkout key is currently configured! We won't be able to check out your project for testing :(

    %div{data-bind: "if: checkout_keys().length"}
      %p
        Here are the keys we can currently use to check out your project, submodules, and private GitHub dependencies. The currently preferred key is highlighted, but we will automatically fall back to the other keys if the preferred key is revoked.

      %table
        %thead
          %th Description
          %th Fingerprint
          %th
        %tbody
          <!-- ko foreach: checkout_keys -->
            %tr{data-bind: "css: { preferred: preferred }"}
              %td
                <!-- ko if: $parent.checkout_key_link($data) -->
                  %a.slideBtn{data-bind: "attr: {href: $parent.checkout_key_link($data)}"}
                    %span{data-bind: "text: $parent.checkout_key_description($data)"}
                    %i.fa.fa-github
                <!-- /ko -->
                <!-- ko ifnot: $parent.checkout_key_link($data) -->
                  %span{data-bind: "text: $parent.checkout_key_description($data)"}
                <!-- /ko -->
              %td
                %span{data-bind: "text: fingerprint"}
              %td
                %a.slideBtn{data-bind: "click: $parent.delete_checkout_key", title: "Remove this key?"}
                  %i.fa.fa-times-circle
                  %span Remove
          <!-- /ko -->

    <!-- ko ifnot: _.some(checkout_keys(), function(ck) { return ck.type == "deploy-key"; }) -->
      .add-key
        %h4
          Add deploy key
        %p
          Deploy keys are the best option for most projects: they only have access to a single GitHub repository.

        .request-user
          %input.btn{type: "submit",
            data-bind: "click: _.partial(create_checkout_key, 'deploy-key'),
                        tooltip: { title: 'Create a new deploy key, with access only to this project.', animation: false},
                        value: 'Create and add ' + project_name() + ' deploy key'",
            data-loading-text: "Saving...",
            data-success-text: "Saved"}
    <!-- /ko -->

    <!-- ko ifnot: _.some(checkout_keys(), function(ck) { return ck.type == "github-user-key"; }) -->
      .add-key
        %h4
          Add user key
        %p
          If a deploy key can't access all of your project's private dependencies, we can configure it to use an SSH key with the same level of access to GitHub repositories that you have.

        .authorization{data-bind: "ifnot: $root.current_user().has_public_key_scope"}
          %p
            In order to do so, you'll need to grant authorization from GitHub to the "admin:public_key" scope. This will allow us to add a new authorized public key to your GitHub account. (Feel free to drop this additional scope after we've added the key!)

          %a.btn.ghu-authorize{data-bind: "tooltip: { title: 'Grant admin:public_key authorization so that we can add a new SSH key to your GitHub account',
                                       animation: false }",
                 href: CI.github.authUrl(["admin:public_key", "user:email", "repo"])}
            %span Authorize w/ GitHub
            %i.fa.fa-github

        .request-user{data-bind: "if: $root.current_user().has_public_key_scope"}
          %input.btn{type: "submit",
            data-bind: "click: _.partial(create_checkout_key, 'github-user-key'),
                        tooltip: { title: 'Create a new user key for this project, with access to all of the projects of your GitHub account.', animation: false },
                        value: 'Create and add ' + $root.current_user().login + ' user key'",
            data-loading-text: "Saving...",
            data-success-text: "Saved"}
    <!-- /ko -->

    .help-block
      %h2 About checkout keys

      %h4 What is a deploy key?
      %p A deploy key is a repo-specific SSH key. GitHub has the public key, and we store the private key. Possession of the private key gives read/write access to a single repository.

      %h4 What is a user key?
      %p A user key is a user-specific SSH key. GitHub has the public key, and we store the private key. Possession of the private key gives the ability to act as that user, for purposes of 'git' access to repositories.

      %h4 How are these keys used?
      %p When we build your project, we install the private key into the .ssh directory, and configure ssh to use it when communicating with 'github.com'. Therefore, it gets used for:

      %ul
        %li checking out the main project
        %li checking out any GitHub-hosted submodules
        %li checking out any GitHub-hosted private dependencies
        %li automatic git merging/tagging/etc.

      %p

      %p That's why a deploy key isn't sufficiently powerful for projects with additional private dependencies!

      %h4 What about security?
      %p The private keys of the checkout keypairs we generate never leave our systems (only the public key is transmitted to GitHub), and are safely encrypted in storage. However, since they are installed into your build containers, any code that you run in Circle can read them. You shouldn't push untrusted code to Circle!

      %h4 Isn't there a middle ground between deploy keys and user keys?
      %p Not really :(

      %p Deploy keys and user keys are the only key types that GitHub supports. Deploy keys are globally unique (i.e. there's no way to make a deploy key with access to multiple repositories) and user keys have no notion of "scope" separate from the user they're associated with.

      %p
        Your best bet, for fine-grained access to more than one repo, is to create what GitHub calls a
        != surround '"', '".', ->
          %a{href: "https://help.github.com/articles/managing-deploy-keys#machine-users"}<>
            machine user
        Give this user exactly the permissions your build requires, and then associate its user key with your project on CircleCI.
