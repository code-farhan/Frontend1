- @title = 'Nightly Builds'
- @lastUpdated = "May 22, 2014"


%p
  The
    %a{href: "/docs/parameterized-builds"}
      experimental Parameterized Build API
  allows you to trigger a build using the
    %a{href: "/docs/api#new-build"}
      CircleCI API
  and inject environment variables into the build environment.

%p
  You can customize your <code>circle.yml</code> to take different actions, such as running a much more extensive test suite, when certain build parameters are present.

%p
  %a{href: "/docs/parameterized-builds"}
    Parameterized builds
  are still an experimental feature.
  We're very interested in what you create with build parameters and would love to get your
    %a{href: "mailto:sayhi@circleci.com"}
      feedback
  on using them.


%h2 Example

%p
  You've a straight-forward <code>circle.yml</code> for your project <code>example-corp/project-foo</code>.
  It just sets a Python version and deploys to your staging Heroku app.

%pre
  %code.yaml<>
    :preserve
      machine:
        python:
          version: 2.7.6

      deployment:
        staging:
          branch: master
          heroku:
            appname: staging-dawn-435

%p
  But sometimes you need to run a nightly build.
  You have a large functional test suite that takes too long to run for a quick edit/test cycle during development.
  These tests should be run once a day at least.

%p
  Creating a conditional step is easy; <code>circle.yml</code> commands are just shell commands and build parameters are just environment variables:

%pre
  %code.yaml<>
    :preserve
      machine:
        python:
          version: 2.7.6

      test:
        post:
          - >
            if [ -n "${RUN_NIGHTLY_BUILD}" ]; then
              ./bin/run-functional-tests.sh ${FUNCTIONAL_TEST_TARGET};
            fi

      deployment:
        staging:
          branch: master
          heroku:
            appname: staging-dawn-435

%p
  <code>./bin/run-functional-tests.sh</code> is only run if <code>RUN_NIGHTLY_BUILD</code> is set (<code>-n</code> means non-zero length).
  Rather than hard-code the target app we use another build-parameter to specify the target for the functional test script in <code>FUNCTIONAL_TEST_TARGET</code>.

%p
  Now, create a simple script to trigger a build:
%pre
  %code.bash<>
    :preserve
      #!/bin/bash

      _project=$1
      _branch=$2
      _circle_token=$3

      trigger_build_url=https://circleci.com/api/v1/project/${_project}/tree/${_branch}?circle-token=${_circle_token}

      post_data=$(cat &lt;&lt;EOF
      {
        "build_parameters": {
          "RUN_NIGHTLY_BUILD": "true",
          "FUNCTIONAL_TEST_TARGET": "staging-dawn-435.herokuapp.com"
        }
      }
      EOF)

      curl \\
      --header "Accept: application/json" \\
      --header "Content-Type: application/json" \\
      --data "${post_data}" \\
      --request POST ${trigger_build_url}

%p
  This triggers a new build of master, passing in the parameters <code>RUN_NIGHTLY_BUILD</code> and <code>FUNCTIONAL_TEST_TARGET</code>.

%p
  The final step to make this a nightly build is to invoke this script in a scheduled job as:
  %pre
    %code.bash<>
      :preserve
        trigger_nightly_build.sh example-corp/project-foo master ${CIRCLE_TOKEN}

%p
  E.g. if you use <code>cron</code> you can set a new job to run every night as your user by running <code>crontab -e</code> and adding:
  %pre
    %code.bash<>
      :preserve
        30 0 * * * /bin/bash /home/ubuntu/bin/trigger_nightly_build.sh example-corp/project-foo master $(cat /home/ubuntu/.circle_token) 2>&1 | /usr/bin/logger

%p
  This runs the trigger_nightly_build.sh script at 30 minutes past midnight (check your server time!).
  It reads the CircleCI API token from <code>/home/ubuntu/.circle_token</code> and sends any output from the script to syslog via <code>logger</code>.

%p
  Note the use of full paths for all binaries, cronjobs aren't run with your normal environment so it's a good idea to always specify full paths.
