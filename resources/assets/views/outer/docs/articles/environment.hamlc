- @title = 'Test environment'
- @lastUpdated = "Jul 8, 2014"
- @v = CI.Versions

%p
  Occasionally, bugs in tests arise because CircleCI's environment differs slightly from your local environment.
  In the future, we plan to allow as much of this to be configurable as possible.
  Please
  != HAML['contact_us']()
  if some part of our environment is not suitable for you, and we will try to come up with a workaround.

%p
  If any version is not listed here, SSH into our build boxes to check it manually (and
  != HAML['contact_us']()
  so we can update this doc.


%h2#base Base

%p
  Our base image uses Ubuntu 12.04, with the addition of many packages
  commonly used in web development.
  Some specifics:

%ul
  %li
    %code Architecture: x86_64
  %li
    %code Username: ubuntu
  %li
    %code Ubuntu 12.04 (precise)
  %li
    %code Kernel version: 3.2
  %li
    %code= @v.v('git')
  %li
    %code= @v.v('gcc')
  %li
    %code= @v.v('g++')
  %li
    %code GNU make 3.81


%h2#env-vars Environmental Variables

%p
  See
  %a{ href: "/docs/environment-variables" } this doc
  for a thorough list of all available environment variables. Here are some of the most
  useful ones:

  %dl
    %dt
      %code CIRCLECI=true
    %dt
      %code CI=true
    %dt
      %code DISPLAY=:99
    %dt
      %code CIRCLE_BRANCH
    %dd
      The name of the branch being tested, such as 'master'
    %dt
      %code CIRCLE_SHA1
    %dd
      The SHA1 of the commit being tested
    %dt
      %code CIRCLE_BUILD_NUM
    %dd
      The build number, same as in circleci.com/gh/foo/bar/123
    %dt
      %code CIRCLE_PROJECT_USERNAME
    %dd
      The username of the github repo, 'foo' in github.com/foo/bar
    %dt
      %code CIRCLE_PROJECT_REPONAME
    %dd
      The repo name of the github repo, 'bar' in github.com/foo/bar
    %dt
      %code CIRCLE_USERNAME
    %dd
      The github login of the user who triggered the build



%p
  You can use the
  %code CI
  and
  %code CIRCLECI
  environment variables in your program, if you need to have CI-specific behavior in you application.
  Naturally, this is not recommended in principle, but it can occasionally be useful in practice.

%h2#browsers Browsers and GUIs


%p
  CircleCI runs graphical programs in a virtual framebuffer, using
  != succeed '.', ->
    xvfb
  This means programs like Selenium, Capybara, Jasmine, and other testing tools which require a browser will work perfectly, just like they do when you use them locally.
  You do not need to do anything special to set this up.
  We have
  != succeed ',', ->
    %code= @v.v('phantomjs')
  %code= @v.v('casperjs')
  and
  %code libwebkit (2.2.1-1ubuntu4)
  pre-installed,
  for Capybara and other headless browser interfaces.


%p
  Xvfb runs on port 99, and the appropriate
  %code DISPLAY
  environment variable has already been set.

%p
  Selenium-based tests are able to use Chrome stable channel
  = "(#{@v.v('Chrome')}" # add leading (
  with
  = @v.v('chromedriver')
  as of October, 2013), and
  = succeed '.', ->
    = @v.v('Firefox')

  Chromedriver 23.0 is also available as
  %code chromedriver23

%p
  %span.label.label-info Help
  %a{href: '/docs/troubleshooting-browsers'}Check out our browser debugging docs.


%h2 Languages

%h3 Ruby

%p We use RVM to give you access to a wide variety of Ruby
  versions. Below are the versions of Ruby that we pre-install; you can specify versions not listed here (supported by RVM) in your circle.yml file and we will install them as part of the build - this will add to your build time, however, if you let us know the version you are using we will update the VM accordingly.

%p
  You can
  %a{ href: "/docs/configuration#ruby-version" }
  choose the exact version you need directly, from the following list:
  %ul
    - for r in @v.ruby_versions
      %li
        %code= r

%p
  By default we use
  %code<
    Ruby
    = @v.default_ruby
  unless we detect that you need Ruby 1.8.7, in which case we'll use
  != succeed '.', ->
    %code= @v.old_ruby
  This is installed via
  RVM (stable).

%p
  We also have a number of Ruby commands pre-installed if you need to use them directly. They use Ruby
  != succeed '.', ->
    %code= @v.default_ruby

%ul
  %li
    %code= @v.v('bundler')
  %li
    %code= @v.v('cucumber')
  %li
    %code= @v.v('rspec')
  %li
    %code= @v.v('rake')


%h3#nodejs node.js
%p
  We use NVM to provide access to a wide range of node versions.
  We currently have a small set of Node versions installed, but any version of Node that you specify in your
  %code circle.yml
  will install instantly, so it's easy to use any Node version.

%p
  Below are the versions of Node.js that we pre-install; you can specify versions not listed here (supported by NVM) in your circle.yml file and we will install them as part of the build - this will add to your build time, however, if you let us know the version you are using we will update the VM accordingly.

%ul
  - for n in @v.node_versions
    %li
      %code= n

%p
  If you do not specify a version, we use
  != succeed '.', ->
    %code= @v.default_node


%h3 Python
%p
  We use
  != succeed "", ->
    %code= @v.v('python')
  by default, although you can
  != succeed '.', ->
    %a{href: "/docs/configuration#python-version"} control the version in your circle.yml file
  Packages can be installed using
  %code= @v.v('pip')
  and
  != succeed ".", ->
    %code= @v.v('virtualenv')

%p
  Below are the versions of Python that we pre-install; you can specify versions not listed here (supported by pyenv) in your circle.yml file and we will install them as part of the build - this will add to your build time, however, if you let us know the version you are using we will update the VM accordingly.
  .row
    - cols = 4
    - per_col = (Math.ceil(@v.python_versions.length / 4.0))
    - for i in [0..cols]
      .span2
        %ul
          - for v in @v.python_versions[(i*per_col)...((i+1)*per_col)]
            %li
              %code
                = v

%p
  Please
  != HAML['contact_us']()
  if other versions of Python would be useful to you.




%h3 PHP
%p
  We use
  != succeed ",", ->
    %code= @v.v('php')
  by default, although you can
  != succeed '.', ->
    %a{href: "/docs/configuration#php-version"} control the version in your circle.yml file
  Packages can be installed using
  <code>composer</code>, <code>pear</code>, and <code>pecl</code>.

%p
  Supported versions are:
  - php_versions = @v.php_versions
  .row
    - cols = 4
    - per_col = (Math.ceil(php_versions.length / 4.0))
    - for i in [0..cols]
      .span2
        %ul
          - for v in php_versions[(i*per_col)...((i+1)*per_col)]
            %li
              %code
                = v

%p
  Are you using a version of PHP that isn't included in this list?
  If so, please
  != HAML['contact_us']({succeed: '.'})


%h3#java Java (and JVM based languages)

%p
  CircleCI has the following languages and tools installed:

%ul
  - for j in @v.java_packages
    %li
      %code= j.name + (if j.version then ', using Java ' + j.version else '')
      - if j.default
        (default)
  %li
    %code= @v.v('ant')
  %li
    %code= @v.v('maven')
  %li
    %code= @v.v('gradle')
  %li
    %code= @v.v('play')

%p
  You can specify the following JVM versions in your <code>circle.yml</code> file:
  %ul
    - for j in @v.java_packages
      %li
        %code= j.package
        - if j.default
          (default)

%h4 Scala

We track <a>http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/</a> for recent Scala releases:
  %ul
    - for s in @v.scala_versions
      %li
        %code= s

We also install some release candidate and beta versions (see the above URL for the complete list).

%h3  Clojure
%p
  We use
  %code= @v.v('lein')

%p
  You should specify your Clojure version in your
  %code project.clj
  file.

%p
  Other JVM-based languages should also work. please
  != HAML['contact_us']()
  let us know if you need anything else installed to run your JVM language of choice.

%h3 Haskell

%p
  We have the following tools installed:

%ul
  - for v in @v.ghc_versions
    %li
      %code= 'ghc ' + v
  %li
    %code= 'cabal-install-1.18'
  %li
    %code= 'happy-1.19.3'
  %li
    %code= 'alex-3.1.3'

%p
  You can
  %a{href: "/docs/configuration#ghc-version"}specify which GHC version
  you'd like in your <code>circle.yml</code>.

%h3#other Other languages
%p
  We currently have a number of packages installed to help you test your backend applications, including:
%ul
  %li
    %code= @v.v('gcc')
  %li
    %code= @v.v('g++')
  %li
    %code= @v.v('golang')
  %li
    %code= @v.v('erlang')

%h2#databases Databases and Services

%p
  We have the following services automatically set up for your tests:

%ul
  %li
    %code= @v.v('postgresql')
    (including postgis 2.0 extensions)

  %li
    %code= @v.v('mysql')
  %li
    %code= @v.v('mongodb')
  %li
    %code= @v.v('riak')
  %li
    %code= @v.v('cassandra')
  %li
    %code= @v.v('redis')
  %li
    %code= @v.v('memcached')
  %li
    %code= @v.v('sphinx')
  %li
    %code= @v.v('elasticsearch')
  %li
    %code= @v.v('solr')
  %li
    %code= @v.v('beanstalkd')
  %li
    %code= @v.v('couchbase')
  %li
    %code= @v.v('couchdb')
  %li
    %code= @v.v('neo4j')
  %li
    %code= @v.v('rabbitmq')

%p
  Both
  %code postgres
  and
  %code mysql
  are set up to use the
  %code ubuntu
  user, have a database called
  %code circle_test
  available, and don't require any password.
  The other databases should not need any specific username or password, and should just work.

%p
  Several services are disabled by default because they're not
  commonly used, or because of memory requirements. We try to
  detect and enable them automatically, but in case
  we fail (or don't have inference in your language), you can
  enable them by adding to your circle.yml:

%pre
  %code.no-highlight<>
    :preserve
      machine:
        services:
          \- cassandra

%p The list of services that can be enabled this way is

%ul
  %li
    %code cassandra
  %li
    %code elasticsearch
  %li
    %code rabbitmq-server
  %li
    %code riak
  %li
    %code beanstalkd
  %li
    %code couchbase-server
  %li
    %code neo4j
