- @tags = ["browser", "capybara", "webkit", "chrome", "firefox", "selenium", "X11", "xorg"]
- @title = "Interacting with the browser on CircleCI's VM"
- @lastUpdated = "May 30, 2014"

%p
  Integration tests can be hard to debug, especially when they're running on a remote machine.
  There are three good ways to debug browser tests on CircleCI.

%h2
  Screenshots and artifacts

%p
  At the end of a build on CircleCI,
  we will gather up all
  %a{href: "/docs/build-artifacts"}
    build artifacts
  and make them available from your build.
  This allows you to save screenshots as part of your build,
  and then view them when the build finishes.

%p
  Saving screenshots is straightforward:
  it's a built-in feature in webkit and selenium, and supported by most test suites:

%ul
  %li
    %a{ href: "http://docs.seleniumhq.org/docs/04_webdriver_advanced.jsp#remotewebdriver" }
      Manually, using Selenium directly
  %li
    %a{ href: "https://github.com/mattheworiordan/capybara-screenshot" }
      Automaticaly on failure, using Cucumber

  %li
    %a{ href: "https://gist.github.com/michalochman/3175175" }
      Automaticaly on failure, using Behat and Mink

%p
  To make this work with build artifacts, you need to save the screenshot to the
  %code $CIRCLE_ARTIFACTS
  directory.

%h2
  Interact with the browser over VNC

%p
  VNC allows you to view and interact with the browser that is running your tests. This will only work if you're using a driver that runs a real browser. You will be able to interact with a browser that Selenium controls, but phantomjs is headless -- there is nothing to interact with.

%p
  Before you start, make sure you have a VNC viewer installed. If you're using OSX, I recommend
  != succeed ".", ->
    %a{href: "http://sourceforge.net/projects/chicken/"} Chicken of the VNC
  %a{href: "http://www.realvnc.com/download/viewer/"} RealVNC
  is also available on most platforms.

%p
  First,
  %a{href: '/docs/ssh-build'}
    start an SSH build
  to a CircleCI VM. When you connect to the machine, add the -L flag and forward the remote port 5901 to the local port 5902:

  %pre
    %code.bash<>
      :preserve
        daniel@mymac$ ssh -p PORT ubuntu@IP_ADDRESS -L 5902:localhost:5901

%p
  You should be connected to the Circle VM, now start the VNC server:

  %pre
    %code.bash<>
      :preserve
        ubuntu@box159:~$ vnc4server -geometry 1280x1024 -depth 24; export DISPLAY=:1.0

%p
  Enter the password <code>password</code> when it prompts you for a password. Your connection is secured with SSH, so there is no need for a strong password. You do need to enter a password to start the VNC server.

%p
  Start your VNC viewer and connect to <code>localhost:5902</code>, enter the password you entered when it prompts you for a password. You should see a display containing a terminal window. You can ignore any warnings about an insecure or unencrypted connection. Your connection is secured through the SSH tunnel.

%p
  Now you can run your integration tests from the command line and watch the browser for unexpected behavior. You can even interact with the browser &mdash; it's as if the tests were running on your local machine!

%h2
  X11 forwarding over SSH

%p
  CircleCI also supports X11 forwarding over SSH. X11 forwarding is similar to VNC -- you can interact with the browser running on CircleCI from your local machine.

%p
  Before you start, make sure you have an X Window System on your computer. If you're using OSX, I recommend
  != succeed '.', ->
    %a{href: 'http://xquartz.macosforge.org/landing/'} XQuartz

%p
  With X set up on your system,
  %a{href: '/docs/ssh-build'} start an SSH build
  to a CircleCI VM, using the
  %code -X
  flag to set up forwarding:

%pre
  %code.bash<>
    :preserve
      daniel@mymac$ ssh -X -p PORT ubuntu@IP_ADDRESS

%p
  This will start an SSH session with X11 forwarding enabled.
  To connect your VM's display to your machine, set the display environment variable to localhost:10.0

%pre
  %code.bash<>
    :preserve
      ubuntu@box10$ export DISPLAY=localhost:10.0

%p
  Check that everything is working by starting xclock.

%pre
  %code.bash<>
    :preserve
      ubuntu@box10$ xclock

%p
  You can kill xclock with Ctrl+c after it appears on your desktop.

%p
  Now you can run your integration tests from the command line and watch the browser for unexpected behavior. You can even interact with the browser &mdash; it's as if the tests were running on your local machine!
