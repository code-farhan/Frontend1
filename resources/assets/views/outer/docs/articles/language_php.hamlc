- @title = 'Continuous Integration and Continuous Deployment with PHP'
- @short_title = 'PHP'
- @lastUpdated = "March 12, 2014"

%p
  Circle works seamlessly with all the tools and package managers that help PHP developers test and deploy their code. We can generally infer most of your dependencies and test commands, but we also provide custom configuration via a
  %code circle.yml
  checked into your repo's root directory.

%h3 Version

%p
  Circle supports more than a dozen
  %a{href: "/docs/environment#php"} versions of PHP,
  and uses
  %code= CI.Versions.default_php
  as the default. You can set a custom version of PHP in the machine section of your circle.yml:

!= HAML.circleyml_language_example({language: "php"})

%p
  Please
  != HAML.contact_us()
  if you need a different version; we'll be happy to install it for you.

%h3 Dependencies

%p
  Circle has the composer, pear, and pecl package managers installed.
  If we find a composer.json file, then we'll automatically run <code>composer install</code>.

%p
  To install your dependencies with either <code>pear</code> or <code>pecl</code>,
  you have to include
  %a{href: "/docs/configuration#dependencies"} dependency commands
  in your <code>circle.yml</code> file.
  The following example shows how to install the MongoDB extension using <code>pecl</code>.


%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - pecl install mongo

%p
  You can also edit your PHP configuration from your <code>circle.yml</code>. For example, if you have a custom configuration file checked in to your repo, then you could do:

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - cp config/custom.ini ~/.phpenv/versions/$(phpenv global)/etc/conf.d/

%p
  %span.label.label-info Note:
  <code>phpenv global</code> returns the PHP version that has been
  specified in your <code>circle.yml</code> file.

%p
  Here's another example showing how you could adjust PHP settings in
  a <code>.ini</code> file.

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - echo "memory_limit = 64M" > ~/.phpenv/versions/$(phpenv global)/etc/conf.d/memory.ini

%p
  %span.label.label-info Note:
  you'll have to specify your PHP version in your <code>circle.yml</code> in order to edit PHP's configuration files.


%h3 Databases

%p
  We have pre-installed more than a dozen
  != succeed ',', ->
    %a{href: "/docs/environment#databases"} databases and queues
  including PostgreSQL and MySQL.
  If needed, you have the option of
  != succeed '.', ->
    %a{href: "/docs/manually#dependencies"} manually setting up your test database

%h3#php-apache Using the Apache Webserver
%p
  Apache2 is already installed on CircleCI containers but it needs to be
  configured to host your PHP application.

%p
  To enable your site check a file containing your site configuration into your
  repository and copy it to <code>/etc/apache2/sites-available/</code> during
  your build.
  Then enable the site with <code>a2ensite</code> and restart Apache.

%p
  An example configuration that sets up Apache to serve the PHP site from
  <code>/home/ubuntu/MY-PROJECT/server-root</code> is:

%pre
  %code.no-highlight<>
    :preserve
      Listen 8080

      &lt;VirtualHost *:8080&gt;
        LoadModule php5_module /home/ubuntu/.phpenv/versions/PHP_VERSION/libexec/libphp5.so

        DocumentRoot /home/ubuntu/MY-PROJECT/server-root
        ServerName host.example.com
        &lt;FilesMatch \\.php$&gt;
          SetHandler application/x-httpd-php
        &lt;/FilesMatch&gt;
      &lt;/VirtualHost&gt;
%p
  Replace <code>MY-SITE</code> in with the name of your site configuration
  file and <code>PHP_VERSION</code> with the version of PHP you configured
  in your <code>circle.yml</code>.

%p
  Then enable your site and restart Apache by adding the following to your <code>circle.yml</code>

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        post:
          - cp ~/MY-PROJECT/MY-SITE /etc/apache2/sites-available
          - a2ensite MY-SITE
          - sudo service apache2 restart

%h3 Testing

%p
  Circle always runs your tests on a fresh machine. If we find a <code>phpunit.xml</code> file in your repo, then we'll run <code>phpunit</code> for you. You can add custom test commands to the test section of your <code>circle.yml</code>:

%pre
  %code.no-highlight<>
    :preserve
      test:
        override:
          - ./my_testing_script.sh

%h3#xdebug Enable Xdebug

%p
  Xdebug is installed for all versions of PHP, but is disabled (for performance reasons) by
  default. It is simple to enable this tool by adding the following to your
  <code>circle.yml</code> file:

%pre
  %code.no-highlight<>
    :preserve
      dependencies:
        pre:
          - sed -i 's/^;//' ~/.phpenv/versions/$(phpenv global)/etc/conf.d/xdebug.ini

%p

%h3 Deployment

%p
  Circle offers first-class support for
  != succeed '.', ->
    %a{href: "/docs/configuration#deployment"} deployment
  When a build is green, Circle will deploy your project as directed
  in your <code>circle.yml</code> file.
  We can deploy to PaaS providers as well as to
  physical servers under your control.

%h3 Troubleshooting for PHP

%p
  If you run into problems, check out our
  %a{href: "/docs/troubleshooting-php"}
    PHP troubleshooting
  write-ups about these issues:

!= @include_article('troubleshooting_php')

%p
  If you are still having trouble, please
  != HAML.contact_us()
  and we will be happy to help.